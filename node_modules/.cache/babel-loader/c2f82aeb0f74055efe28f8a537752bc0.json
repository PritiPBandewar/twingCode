{"ast":null,"code":"export const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(`ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeof input}`);\n  }\n\n  if (input.length <= 0) {\n    throw new Error(`ArgumentError: Expected valid array `);\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"ArgumentError: Expected valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(`This array cannot be divide in ${size} subarrays`);\n  }\n\n  const noOfElementInOneArray = Math.ceil(input.length / size);\n  const result = [];\n  let index = 0; // while (index < input.length) {\n  //   const chunk = input.slice(index, index + noOfElementInOneArray)\n  //   result.push(chunk);\n  //   index = index + noOfElementInOneArray;\n  // }\n\n  const chunkedArray = []; // Note that this iterates by splitSize, not by i++\n\n  for (let i = 0; i < input.length; i += size) {\n    chunkedArray.push(input.slice(i, i + size));\n  }\n\n  return chunkedArray; // return result;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/groupArrayElements.js"],"names":["groupArrayElements","input","size","Array","isArray","Error","length","noOfElementInOneArray","Math","ceil","result","index","chunkedArray","i","push","slice"],"mappings":"AACA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAII,KAAJ,CACH,0EAAyE,OAAOJ,KAAO,EADpF,CAAN;AAGD;;AAED,MAAGA,KAAK,CAACK,MAAN,IAAe,CAAlB,EAAoB;AAClB,UAAM,IAAID,KAAJ,CAAW,sCAAX,CAAN;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,CAAzC,EAA4C;AAC1C,UAAM,IAAIG,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,MAAIJ,KAAK,CAACK,MAAN,GAAeJ,IAAnB,EAAyB;AACvB,UAAM,IAAIG,KAAJ,CAAW,kCAAiCH,IAAK,YAAjD,CAAN;AACD;;AAED,QAAMK,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUR,KAAK,CAACK,MAAN,GAAeJ,IAAzB,CAA9B;AACA,QAAMQ,MAAM,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ,CArBiD,CAuBjD;AACA;AACA;AACA;AACA;;AAEA,QAAMC,YAAY,GAAG,EAArB,CA7BiD,CA+BjD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACK,MAA1B,EAAkCO,CAAC,IAAIX,IAAvC,EAA6C;AAC3CU,IAAAA,YAAY,CAACE,IAAb,CAAkBb,KAAK,CAACc,KAAN,CAAYF,CAAZ,EAAeA,CAAC,GAAGX,IAAnB,CAAlB;AACD;;AAED,SAAOU,YAAP,CApCiD,CAsCjD;AACD,CAvCM","sourcesContent":["\nexport const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(\n      `ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeof(input)}`\n    );\n  }\n\n  if(input.length <=0){\n    throw new Error(`ArgumentError: Expected valid array `);\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"ArgumentError: Expected valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(`This array cannot be divide in ${size} subarrays`);\n  }\n  \n  const noOfElementInOneArray = Math.ceil(input.length / size);\n  const result = [];\n  let index = 0;\n\n  // while (index < input.length) {\n  //   const chunk = input.slice(index, index + noOfElementInOneArray)\n  //   result.push(chunk);\n  //   index = index + noOfElementInOneArray;\n  // }\n\n  const chunkedArray = [];\n\n  // Note that this iterates by splitSize, not by i++\n  for (let i = 0; i < input.length; i += size) {\n    chunkedArray.push(input.slice(i, i + size));\n  }\n\n  return chunkedArray;\n\n  // return result;\n};\n"]},"metadata":{},"sourceType":"module"}