{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/Pune/TwingCode/src/App.js\";\nimport { chunkedArrayFunction } from './chunkedArray.js';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const chunk = (arr, size) => Array.from({\n    length: Math.ceil(arr.length / size)\n  }, (v, i) => arr.slice(i * size, i * size + size));\n\n  console.log(chunk([1, 2, 3, 4, 5], 2));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), console.log(\"ele\", chunkedArrayFunction([1, 5, 3, 4, 5], 2))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/App.js"],"names":["chunkedArrayFunction","App","chunk","arr","size","Array","from","length","Math","ceil","v","i","slice","console","log"],"mappings":";AAAA,SAAQA,oBAAR,QAAmC,mBAAnC;AAEA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,IAAN,KACdC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAUN,GAAG,CAACI,MAAJ,GAAaH,IAAvB;AAAV,GAAX,EAAqD,CAACM,CAAD,EAAIC,CAAJ,KACnDR,GAAG,CAACS,KAAJ,CAAUD,CAAC,GAAGP,IAAd,EAAoBO,CAAC,GAAGP,IAAJ,GAAWA,IAA/B,CADF,CADA;;AAIFS,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAD,EAAkB,CAAlB,CAAjB;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGW,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBd,oBAAoB,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAD,EAAc,CAAd,CAAvC,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KAbQC,G;AAeT,eAAeA,GAAf","sourcesContent":["import {chunkedArrayFunction} from './chunkedArray.js'\n\nimport \"./App.css\";\n\nfunction App() {\n  const chunk = (arr, size) =>\n  Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n    arr.slice(i * size, i * size + size)\n  );\nconsole.log(chunk([1, 2, 3, 4, 5], 2));\n  return (\n    <div className=\"App\">\n      <p>Welcome</p>\n      {console.log(\"ele\", chunkedArrayFunction([1,5,3,4,5], 2))}\n      {/* <p>{chunkedArrayFunction([1,2], 1)}</p> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}