{"ast":null,"code":"import { Validator } from \"./validator\";\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n\n  return newArray;\n};\nexport const groupArrayElements = (array, n) => {\n  var index = 0;\n  var arrayLength = array.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += n) {\n    const myChunk = array.slice(index, index + n);\n    tempArray.push(myChunk);\n  }\n\n  return tempArray;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/chunkedArray.js"],"names":["Validator","chunkedArrayFunction","array","numberOfSubArray","isValidationSuccessful","noOfElementInOneArray","Math","ceil","length","newArray","index","push","slice","groupArrayElements","n","arrayLength","tempArray","myChunk"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,gBAAR,KAA6B;AAC/D;AACA,QAAMC,sBAAsB,GAAGJ,SAAS,CAACE,KAAD,EAAQC,gBAAR,CAAxC;;AAEA,MAAIC,sBAAsB,KAAK,SAA/B,EAA0C;AACxC,WAAOA,sBAAP;AACD;;AAED,MAAIC,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACM,MAAN,GAAeL,gBAAzB,CAA5B;AACA,MAAIM,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGR,KAAK,CAACM,MAArB,EAA6B;AAC3BC,IAAAA,QAAQ,CAACE,IAAT,CAAcT,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGL,qBAA3B,CAAd;AACAK,IAAAA,KAAK,GAAGA,KAAK,GAAGL,qBAAhB;AACD;;AACD,SAAOI,QAAP;AACD,CAhBM;AAmBP,OAAO,MAAMI,kBAAkB,GAAG,CAACX,KAAD,EAAQY,CAAR,KAAc;AAE9C,MAAIJ,KAAK,GAAG,CAAZ;AACA,MAAIK,WAAW,GAAGb,KAAK,CAACM,MAAxB;AACA,MAAIQ,SAAS,GAAG,EAAhB;;AAEA,OAAKN,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGK,WAAxB,EAAqCL,KAAK,IAAII,CAA9C,EAAiD;AAChD,UAAMG,OAAO,GAAGf,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGI,CAA3B,CAAhB;AACCE,IAAAA,SAAS,CAACL,IAAV,CAAeM,OAAf;AACD;;AAED,SAAOD,SAAP;AACD,CAZM","sourcesContent":["import { Validator } from \"./validator\";\n\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n  return newArray;\n};\n\n\nexport const groupArrayElements = (array, n) => {\n \n  var index = 0;\n  var arrayLength = array.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += n) {\n   const myChunk = array.slice(index, index + n);\n    tempArray.push(myChunk);\n  }\n\n  return tempArray;\n};\n"]},"metadata":{},"sourceType":"module"}