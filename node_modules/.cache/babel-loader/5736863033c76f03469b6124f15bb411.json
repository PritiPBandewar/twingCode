{"ast":null,"code":"import { Validator } from \"./validator\";\nexport const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(`ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeOf(input)}`);\n  } // check if the data is valid or not\n\n\n  const isValidationSuccessful = Validator(input, size);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(input.length / size);\n  let newArray = [];\n  let index = 0;\n\n  while (index < input.length) {\n    newArray.push(input.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n\n  return newArray;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/groupArrayElements.js"],"names":["Validator","groupArrayElements","input","size","Array","isArray","Error","typeOf","isValidationSuccessful","noOfElementInOneArray","Math","ceil","length","newArray","index","push","slice"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAII,KAAJ,CACH,0EAAyEC,MAAM,CAACL,KAAD,CAAQ,EADpF,CAAN;AAGD,GALgD,CAMjD;;;AACA,QAAMM,sBAAsB,GAAGR,SAAS,CAACE,KAAD,EAAQC,IAAR,CAAxC;;AAEA,MAAIK,sBAAsB,KAAK,SAA/B,EAA0C;AACxC,WAAOA,sBAAP;AACD;;AAED,MAAIC,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUT,KAAK,CAACU,MAAN,GAAeT,IAAzB,CAA5B;AACA,MAAIU,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGZ,KAAK,CAACU,MAArB,EAA6B;AAC3BC,IAAAA,QAAQ,CAACE,IAAT,CAAcb,KAAK,CAACc,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGL,qBAA3B,CAAd;AACAK,IAAAA,KAAK,GAAGA,KAAK,GAAGL,qBAAhB;AACD;;AACD,SAAOI,QAAP;AACD,CArBM","sourcesContent":["import { Validator } from \"./validator\";\n\nexport const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(\n      `ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeOf(input)}`\n    );\n  }\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(input, size);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(input.length / size);\n  let newArray = [];\n  let index = 0;\n  while (index < input.length) {\n    newArray.push(input.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n  return newArray;\n};\n"]},"metadata":{},"sourceType":"module"}