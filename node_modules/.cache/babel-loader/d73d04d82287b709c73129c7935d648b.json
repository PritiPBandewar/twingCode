{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/Pune/TwingCode/src/chunkedArray.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const chunkedArrayFunction = (arr, numberOfArray) => {\n  var chunked = Math.floor(arr.length / numberOfArray);\n  var reminder = arr.length % numberOfArray;\n\n  if (reminder) {\n    chunked = chunked + 1;\n  }\n\n  const chunkedNe = [];\n\n  if (arr.length < numberOfArray) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Cannot create \", numberOfArray, \" array of given array.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  } else {\n    for (let element of arr) {\n      const last = chunked[chunked.length - 1];\n\n      if (!last || last.length === chunked) {\n        chunked.push([element]);\n      } else {\n        last.push(element);\n      }\n    }\n\n    return chunked;\n  }\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/chunkedArray.js"],"names":["chunkedArrayFunction","arr","numberOfArray","chunked","Math","floor","length","reminder","chunkedNe","element","last","push"],"mappings":";;AAAA,OAAO,MAAMA,oBAAoB,GAAG,CAACC,GAAD,EAAMC,aAAN,KAAwB;AAC1D,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,MAAJ,GAAWJ,aAAtB,CAAd;AACA,MAAIK,QAAQ,GAAGN,GAAG,CAACK,MAAJ,GAAWJ,aAA1B;;AACA,MAAGK,QAAH,EAAa;AACXJ,IAAAA,OAAO,GAAEA,OAAO,GAAC,CAAjB;AACD;;AACH,QAAMK,SAAS,GAAG,EAAlB;;AAEE,MAAIP,GAAG,CAACK,MAAJ,GAAaJ,aAAjB,EAAgC;AAC9B,wBAAO;AAAA,mCAAkBA,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AAEL,SAAK,IAAIO,OAAT,IAAoBR,GAApB,EAAyB;AACvB,YAAMS,IAAI,GAAGP,OAAO,CAACA,OAAO,CAACG,MAAR,GAAiB,CAAlB,CAApB;;AACA,UAAI,CAACI,IAAD,IAASA,IAAI,CAACJ,MAAL,KAAgBH,OAA7B,EAAsC;AACpCA,QAAAA,OAAO,CAACQ,IAAR,CAAa,CAACF,OAAD,CAAb;AACD,OAFD,MAEO;AACLC,QAAAA,IAAI,CAACC,IAAL,CAAUF,OAAV;AACD;AACF;;AACD,WAAON,OAAP;AACD;AACF,CAtBM","sourcesContent":["export const chunkedArrayFunction = (arr, numberOfArray) => {\n  var chunked = Math.floor(arr.length/numberOfArray);\n  var reminder = arr.length%numberOfArray;\n  if(reminder ){\n    chunked =chunked+1\n  }\nconst chunkedNe = []\n\n  if (arr.length < numberOfArray) {\n    return <p>Cannot create {numberOfArray} array of given array.</p>;\n  } else {\n    \n    for (let element of arr) {\n      const last = chunked[chunked.length - 1];\n      if (!last || last.length === chunked) {\n        chunked.push([element]);\n      } else {\n        last.push(element);\n      }\n    }\n    return chunked;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}