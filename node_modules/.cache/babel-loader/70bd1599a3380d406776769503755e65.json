{"ast":null,"code":"export const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(`ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeOf(input)}`);\n  }\n\n  if (input.length <= 0) {\n    throw new Error(\"Please provide valid Array\");\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"Please provide valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(`This array cannot be divide in ${size} subarrays`);\n  }\n\n  const noOfElementInOneArray = Math.ceil(input.length / size);\n  const newArray = [];\n  let index = 0;\n\n  while (index < input.length) {\n    newArray.push(input.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n\n  return newArray;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/groupArrayElements.js"],"names":["groupArrayElements","input","size","Array","isArray","Error","typeOf","length","noOfElementInOneArray","Math","ceil","newArray","index","push","slice"],"mappings":"AACA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAII,KAAJ,CACH,0EAAyEC,MAAM,CAACL,KAAD,CAAQ,EADpF,CAAN;AAGD;;AAED,MAAGA,KAAK,CAACM,MAAN,IAAe,CAAlB,EAAoB;AAClB,UAAM,IAAIF,KAAJ,CAAW,4BAAX,CAAN;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,CAAzC,EAA4C;AAC1C,UAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,MAAIJ,KAAK,CAACM,MAAN,GAAeL,IAAnB,EAAyB;AACvB,UAAM,IAAIG,KAAJ,CAAW,kCAAiCH,IAAK,YAAjD,CAAN;AACD;;AAED,QAAMM,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUT,KAAK,CAACM,MAAN,GAAeL,IAAzB,CAA9B;AACA,QAAMS,QAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGX,KAAK,CAACM,MAArB,EAA6B;AAC3BI,IAAAA,QAAQ,CAACE,IAAT,CAAcZ,KAAK,CAACa,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGJ,qBAA3B,CAAd;AACAI,IAAAA,KAAK,GAAGA,KAAK,GAAGJ,qBAAhB;AACD;;AACD,SAAOG,QAAP;AACD,CA3BM","sourcesContent":["\nexport const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(\n      `ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeOf(input)}`\n    );\n  }\n\n  if(input.length <=0){\n    throw new Error( \"Please provide valid Array\");\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"Please provide valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(`This array cannot be divide in ${size} subarrays`);\n  }\n  \n  const noOfElementInOneArray = Math.ceil(input.length / size);\n  const newArray = [];\n  let index = 0;\n  while (index < input.length) {\n    newArray.push(input.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n  return newArray;\n};\n"]},"metadata":{},"sourceType":"module"}