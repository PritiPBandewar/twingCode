{"ast":null,"code":"export const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(`ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeof input}`);\n  }\n\n  if (input.length <= 0) {\n    throw new Error(`Expected \\`input\\` to have a minimum length of \\`1\\`, got \\`${input.length}\\``);\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"Please provide valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(`Expected \\`input\\` to have a maximum length of \\`${size}\\`, got \\`${input.length}\\``);\n  }\n\n  const result = [];\n  const counter = Math.ceil(input.length / size);\n\n  for (let index = size; index > 0; index--) {\n    result.push(input.splice(0, Math.ceil(input.length / index)));\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/groupArrayElements.js"],"names":["groupArrayElements","input","size","Array","isArray","Error","length","result","counter","Math","ceil","index","push","splice"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAII,KAAJ,CACH,0EAAyE,OAAOJ,KAAM,EADnF,CAAN;AAGD;;AAED,MAAIA,KAAK,CAACK,MAAN,IAAgB,CAApB,EAAuB;AACrB,UAAM,IAAID,KAAJ,CACH,+DAA8DJ,KAAK,CAACK,MAAO,IADxE,CAAN;AAGD;;AAED,MAAI,OAAOJ,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,CAAzC,EAA4C;AAC1C,UAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,MAAIJ,KAAK,CAACK,MAAN,GAAeJ,IAAnB,EAAyB;AACvB,UAAM,IAAIG,KAAJ,CACH,oDAAmDH,IAAK,aAAYD,KAAK,CAACK,MAAO,IAD9E,CAAN;AAGD;;AAED,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUT,KAAK,CAACK,MAAN,GAAeJ,IAAzB,CAAhB;;AAEA,OAAK,IAAIS,KAAK,GAAGT,IAAjB,EAAuBS,KAAK,GAAG,CAA/B,EAAkCA,KAAK,EAAvC,EAA2C;AACzCJ,IAAAA,MAAM,CAACK,IAAP,CAAYX,KAAK,CAACY,MAAN,CAAa,CAAb,EAAgBJ,IAAI,CAACC,IAAL,CAAUT,KAAK,CAACK,MAAN,GAAeK,KAAzB,CAAhB,CAAZ;AACD;;AAED,SAAOJ,MAAP;AACD,CA/BM","sourcesContent":["export const groupArrayElements = (input, size) => {\n  if (!Array.isArray(input)) {\n    throw new Error(\n      `ArgumentError: Expected \\`input\\` to be of type \\`array\\` but received ${typeof input}`\n    );\n  }\n\n  if (input.length <= 0) {\n    throw new Error(\n      `Expected \\`input\\` to have a minimum length of \\`1\\`, got \\`${input.length}\\``\n    );\n  }\n\n  if (typeof size !== \"number\" || size === 0) {\n    throw new Error(\"Please provide valid subarray number greater than 0\");\n  }\n\n  if (input.length < size) {\n    throw new Error(\n      `Expected \\`input\\` to have a maximum length of \\`${size}\\`, got \\`${input.length}\\``\n    );\n  }\n\n  const result = [];\n  const counter = Math.ceil(input.length / size);\n\n  for (let index = size; index > 0; index--) {\n    result.push(input.splice(0, Math.ceil(input.length / index)));\n  }\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}