{"ast":null,"code":"import { Validator } from \"./validator\";\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n\n  return newArray;\n};\nlet rand = Math.floor(Math.random() * (Math.floor(100) - Math.ceil(1) + 1)) + Math.ceil(1);\nlet n = Math.floor(Math.random() * (Math.floor(rand - 1) - Math.ceil(1) + 1)) + Math.ceil(1);\nlet array = Array.from(Array(rand).keys());\nexport const groupArrayElements = (array, n) => {\n  var index = 0;\n  var arrayLength = array === null || array === void 0 ? void 0 : array.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += n) {\n    const myChunk = array.slice(index, index + n);\n    tempArray.push(myChunk);\n  }\n\n  return tempArray;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/chunkedArray.js"],"names":["Validator","chunkedArrayFunction","array","numberOfSubArray","isValidationSuccessful","noOfElementInOneArray","Math","ceil","length","newArray","index","push","slice","rand","floor","random","n","Array","from","keys","groupArrayElements","arrayLength","tempArray","myChunk"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,gBAAR,KAA6B;AAC/D;AACA,QAAMC,sBAAsB,GAAGJ,SAAS,CAACE,KAAD,EAAQC,gBAAR,CAAxC;;AAEA,MAAIC,sBAAsB,KAAK,SAA/B,EAA0C;AACxC,WAAOA,sBAAP;AACD;;AAED,MAAIC,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACM,MAAN,GAAeL,gBAAzB,CAA5B;AACA,MAAIM,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGR,KAAK,CAACM,MAArB,EAA6B;AAC3BC,IAAAA,QAAQ,CAACE,IAAT,CAAcT,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGL,qBAA3B,CAAd;AACAK,IAAAA,KAAK,GAAGA,KAAK,GAAGL,qBAAhB;AACD;;AACD,SAAOI,QAAP;AACD,CAhBM;AAkBP,IAAII,IAAI,GACNP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACS,MAAL,MAAiBT,IAAI,CAACQ,KAAL,CAAW,GAAX,IAAkBR,IAAI,CAACC,IAAL,CAAU,CAAV,CAAlB,GAAiC,CAAlD,CAAX,IACAD,IAAI,CAACC,IAAL,CAAU,CAAV,CAFF;AAIA,IAAIS,CAAC,GACHV,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACS,MAAL,MAAiBT,IAAI,CAACQ,KAAL,CAAWD,IAAI,GAAG,CAAlB,IAAuBP,IAAI,CAACC,IAAL,CAAU,CAAV,CAAvB,GAAsC,CAAvD,CAAX,IACAD,IAAI,CAACC,IAAL,CAAU,CAAV,CAFF;AAIA,IAAIL,KAAK,GAAGe,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACJ,IAAD,CAAL,CAAYM,IAAZ,EAAX,CAAZ;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAAClB,KAAD,EAAQc,CAAR,KAAc;AAC9C,MAAIN,KAAK,GAAG,CAAZ;AACA,MAAIW,WAAW,GAAGnB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEM,MAAzB;AACA,MAAIc,SAAS,GAAG,EAAhB;;AAEA,OAAKZ,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGW,WAAxB,EAAqCX,KAAK,IAAIM,CAA9C,EAAiD;AAChD,UAAMO,OAAO,GAAGrB,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGM,CAA3B,CAAhB;AACCM,IAAAA,SAAS,CAACX,IAAV,CAAeY,OAAf;AACD;;AAED,SAAOD,SAAP;AACD,CAXM","sourcesContent":["import { Validator } from \"./validator\";\n\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n  return newArray;\n};\n\nlet rand =\n  Math.floor(Math.random() * (Math.floor(100) - Math.ceil(1) + 1)) +\n  Math.ceil(1);\n\nlet n =\n  Math.floor(Math.random() * (Math.floor(rand - 1) - Math.ceil(1) + 1)) +\n  Math.ceil(1);\n\nlet array = Array.from(Array(rand).keys());\n\nexport const groupArrayElements = (array, n) => {\n  var index = 0;\n  var arrayLength = array?.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += n) {\n   const myChunk = array.slice(index, index + n);\n    tempArray.push(myChunk);\n  }\n\n  return tempArray;\n};\n"]},"metadata":{},"sourceType":"module"}