{"ast":null,"code":"import { Validator } from \"./validator\";\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n\n  return newArray;\n};\nlet rand = Math.floor(Math.random() * (Math.floor(100) - Math.ceil(1) + 1)) + Math.ceil(1);\nlet n = Math.floor(Math.random() * (Math.floor(rand - 1) - Math.ceil(1) + 1)) + Math.ceil(1);\nlet arr = Array.from(Array(rand).keys());\nexport const groupArrayElements = (array, n) => {\n  var index = 0;\n  var arrayLength = array.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += n) {\n    myChunk = array.slice(index, index + n);\n    tempArray.push(myChunk);\n  }\n\n  return tempArray;\n};","map":{"version":3,"sources":["/home/user/Downloads/Pune/TwingCode/src/chunkedArray.js"],"names":["Validator","chunkedArrayFunction","array","numberOfSubArray","isValidationSuccessful","noOfElementInOneArray","Math","ceil","length","newArray","index","push","slice","rand","floor","random","n","arr","Array","from","keys","groupArrayElements","arrayLength","tempArray","myChunk"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,gBAAR,KAA6B;AAC/D;AACA,QAAMC,sBAAsB,GAAGJ,SAAS,CAACE,KAAD,EAAQC,gBAAR,CAAxC;;AAEA,MAAIC,sBAAsB,KAAK,SAA/B,EAA0C;AACxC,WAAOA,sBAAP;AACD;;AAED,MAAIC,qBAAqB,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACM,MAAN,GAAeL,gBAAzB,CAA5B;AACA,MAAIM,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGR,KAAK,CAACM,MAArB,EAA6B;AAC3BC,IAAAA,QAAQ,CAACE,IAAT,CAAcT,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAAGL,qBAA3B,CAAd;AACAK,IAAAA,KAAK,GAAGA,KAAK,GAAGL,qBAAhB;AACD;;AACD,SAAOI,QAAP;AACD,CAhBM;AAmBP,IAAII,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACS,MAAL,MAAiBT,IAAI,CAACQ,KAAL,CAAW,GAAX,IAAkBR,IAAI,CAACC,IAAL,CAAU,CAAV,CAAlB,GAAiC,CAAlD,CAAX,IAAmED,IAAI,CAACC,IAAL,CAAU,CAAV,CAA9E;AAEI,IAAIS,CAAC,GAAGV,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACS,MAAL,MAAiBT,IAAI,CAACQ,KAAL,CAAWD,IAAI,GAAC,CAAhB,IAAqBP,IAAI,CAACC,IAAL,CAAU,CAAV,CAArB,GAAoC,CAArD,CAAX,IAAsED,IAAI,CAACC,IAAL,CAAU,CAAV,CAA9E;AAEA,IAAIU,GAAG,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACL,IAAD,CAAL,CAAYO,IAAZ,EAAX,CAAV;AAEA,OAAO,MAAOC,kBAAkB,GAAG,CAACnB,KAAD,EAAQc,CAAR,KACnC;AACI,MAAIN,KAAK,GAAG,CAAZ;AACA,MAAIY,WAAW,GAAGpB,KAAK,CAACM,MAAxB;AACA,MAAIe,SAAS,GAAG,EAAhB;;AAEA,OAAKb,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGY,WAAxB,EAAqCZ,KAAK,IAAIM,CAA9C,EAAiD;AAC7CQ,IAAAA,OAAO,GAAGtB,KAAK,CAACU,KAAN,CAAYF,KAAZ,EAAmBA,KAAK,GAACM,CAAzB,CAAV;AACAO,IAAAA,SAAS,CAACZ,IAAV,CAAea,OAAf;AACH;;AAED,SAAOD,SAAP;AACH,CAZM","sourcesContent":["import { Validator } from \"./validator\";\n\nexport const chunkedArrayFunction = (array, numberOfSubArray) => {\n  // check if the data is valid or not\n  const isValidationSuccessful = Validator(array, numberOfSubArray);\n\n  if (isValidationSuccessful !== \"Success\") {\n    return isValidationSuccessful;\n  }\n\n  var noOfElementInOneArray = Math.ceil(array.length / numberOfSubArray);\n  let newArray = [];\n  let index = 0;\n  while (index < array.length) {\n    newArray.push(array.slice(index, index + noOfElementInOneArray));\n    index = index + noOfElementInOneArray;\n  }\n  return newArray;\n};\n\n\nlet rand = Math.floor(Math.random() * (Math.floor(100) - Math.ceil(1) + 1)) + Math.ceil(1);\n\n    let n = Math.floor(Math.random() * (Math.floor(rand-1) - Math.ceil(1) + 1)) + Math.ceil(1);\n\n    let arr = Array.from(Array(rand).keys());\n\n    export const  groupArrayElements = (array, n)=>\n    {\n        var index = 0;\n        var arrayLength = array.length;\n        var tempArray = [];\n        \n        for (index = 0; index < arrayLength; index += n) {\n            myChunk = array.slice(index, index+n);\n            tempArray.push(myChunk);\n        }\n\n        return tempArray;\n    }\n"]},"metadata":{},"sourceType":"module"}